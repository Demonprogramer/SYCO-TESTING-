const axios = require("axios");
const { exec } = require("child_process");
const fs = require("fs");
const ytsr = require("ytsr");

module.exports.config = {
    name: "mp3",
    version: "2.0",
    hasPermission: 0,
    credits: "Mirrykal",
    description: "Download and send MP3 from YouTube",
    commandCategory: "music",
    usages: "[song name]",
    cooldowns: 5
};

module.exports.run = async function ({ api, event, args }) {
    if (args.length === 0) {
        return api.sendMessage("Please enter a song name!", event.threadID, event.messageID);
    }

    const query = args.join(" ");
    api.sendMessage(`üîç Searching for: ${query}...`, event.threadID, event.messageID);

    try {
        // üîπ Step 1: YouTube ‡§™‡§∞ ‡§ó‡§æ‡§®‡§æ ‡§∏‡§∞‡•ç‡§ö ‡§ï‡§∞‡•ã
        const searchResults = await ytsr(query, { limit: 1 });
        if (searchResults.items.length === 0) {
            return api.sendMessage("‚ùå No results found!", event.threadID, event.messageID);
        }

        const video = searchResults.items[0];
        const videoUrl = video.url;
        const title = video.title.replace(/[^a-zA-Z0-9]/g, "_"); // Invalid characters remove

        api.sendMessage(`‚¨á Downloading: ${title}`, event.threadID, event.messageID);

        // üîπ Step 2: MP3 ‡§°‡§æ‡§â‡§®‡§≤‡•ã‡§° ‡§ï‡§∞‡•ã (yt-dlp ‡§∏‡•á)
        const filePath = `./temp/${title}.mp3`;
        const command = `yt-dlp -x --audio-format mp3 -o "${filePath}" "${videoUrl}"`;

        exec(command, async (error, stdout, stderr) => {
            if (error) {
                console.error("‚ùå Download Error:", error);
                return api.sendMessage("‚ùå Failed to download MP3.", event.threadID, event.messageID);
            }

            // üîπ Step 3: File ‡§ï‡•ã Messenger ‡§™‡§∞ ‡§≠‡•á‡§ú‡•ã
            api.sendMessage({
                body: `üéµ Here is your song: ${title}`,
                attachment: fs.createReadStream(filePath)
            }, event.threadID, () => {
                fs.unlinkSync(filePath); // ‚úÖ File ‡§°‡§ø‡§≤‡•Ä‡§ü ‡§ï‡§∞‡•ã ‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç
            }, event.messageID);
        });

    } catch (error) {
        console.error("‚ùå Error:", error);
        return api.sendMessage("‚ö† An error occurred while processing your request.", event.threadID, event.messageID);
    }
};
