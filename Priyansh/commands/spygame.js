const axios = require("axios");

module.exports.config = {
    name: "spygame",
    version: "1.0.4",
    hasPermission: 0,
    credits: "MirryKal",
    description: "A fun spy game for group chats with auto-player inclusion!",
    commandCategory: "games",
    usages: "+spygame @players",
    cooldowns: 5
};

const wordCategories = {
    "Fruits": ["Apple", "Banana", "Mango", "Pineapple", "Grapes", "Strawberry", "Watermelon", "Peach", "Guava", "Pomegranate"],
    "Animals": ["Lion", "Tiger", "Elephant", "Cheetah", "Leopard", "Kangaroo", "Giraffe", "Zebra", "Panda", "Wolf"],
    "Sports": ["Football", "Cricket", "Basketball", "Tennis", "Hockey", "Volleyball", "Badminton", "Golf", "Wrestling", "Boxing"],
    "Vehicles": ["Car", "Bike", "Train", "Aeroplane", "Bus", "Truck", "Scooter", "Ship", "Tractor", "Bicycle"],
    "Jobs": ["Doctor", "Engineer", "Teacher", "Scientist", "Police", "Lawyer", "Chef", "Pilot", "Actor", "Writer"],
    "Beverages": ["Tea", "Coffee", "Juice", "Milk", "Soda", "Wine", "Beer", "Coconut Water", "Smoothie", "Energy Drink"]
};

module.exports.run = async function ({ api, event, args }) {
    const { threadID, messageID, mentions, senderID } = event;

    // üèÜ Auto-Include Command User
    let players = Object.keys(mentions);
    if (!players.includes(senderID)) {
        players.push(senderID);
    }

    if (players.length < 3 || players.length > 6) {
        return api.sendMessage("‚ö† ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ 3 ‡§î‡§∞ ‡§Ö‡§ß‡§ø‡§ï‡§§‡§Æ 6 ‡§™‡•ç‡§≤‡•á‡§Ø‡§∞‡•ç‡§∏ ‡§Æ‡•á‡§Ç‡§∂‡§® ‡§ï‡§∞‡•á‡§Ç!", threadID, messageID);
    }

    const categories = Object.keys(wordCategories);
    const chosenCategory = categories[Math.floor(Math.random() * categories.length)];
    let words = [...wordCategories[chosenCategory]];

    let spyIndex = Math.floor(Math.random() * players.length);
    let spy = players[spyIndex];
    let wordForSpy = words[Math.floor(Math.random() * words.length)];
    let assignedWords = {};

    players.forEach((player, index) => {
        assignedWords[player] = index === spyIndex ? wordForSpy : words[0];
    });

    api.sendMessage(`üé≠ *Spy Game ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§ö‡•Å‡§ï‡§æ ‡§π‡•à!*\n\n**‡§∂‡•ç‡§∞‡•á‡§£‡•Ä:** ${chosenCategory}\nüì¢ ‡§π‡§∞ ‡§ñ‡§ø‡§≤‡§æ‡§°‡§º‡•Ä ‡§ï‡•ã ‡§Ö‡§™‡§®‡•á ‡§∂‡§¨‡•ç‡§¶ ‡§ï‡•ã ‡§∏‡§Æ‡§ù‡§æ‡§®‡§æ ‡§π‡•ã‡§ó‡§æ, ‡§≤‡•á‡§ï‡§ø‡§® ‡§∂‡§¨‡•ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§¨‡§§‡§æ‡§®‡§æ ‡§π‡•à!\n\nüîç *Bot ‡§Ö‡§¨ ‡§∏‡§≠‡•Ä ‡§™‡•ç‡§≤‡•á‡§Ø‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§â‡§®‡§ï‡•á ‡§∂‡§¨‡•ç‡§¶ ‡§≠‡•á‡§ú ‡§∞‡§π‡§æ ‡§π‡•à...*`, threadID);

    // üî• Async function for DM
    const sendWordToPlayer = async (playerID, word) => {
        try {
            await api.sendMessage(`ü§´ ‡§Ü‡§™‡§ï‡§æ ‡§ó‡•Å‡§™‡•ç‡§§ ‡§∂‡§¨‡•ç‡§¶: *${word}*`, playerID);
        } catch (err) {
            api.sendMessage(`‚ö† *${mentions[playerID] || "Player"}* ‡§ï‡•ã DM ‡§®‡§π‡•Ä‡§Ç ‡§≠‡•á‡§ú ‡§∏‡§ï‡§æ, ‡§â‡§®‡§ï‡§æ ‡§∂‡§¨‡•ç‡§¶ ‡§π‡•à: *${word}*`, threadID);
        }
    };

    for (let playerID of players) {
        await sendWordToPlayer(playerID, assignedWords[playerID]);
    }

    api.sendMessage(`‚úÖ ‡§∏‡§≠‡•Ä ‡§™‡•ç‡§≤‡•á‡§Ø‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§â‡§®‡§ï‡•á ‡§∂‡§¨‡•ç‡§¶ ‡§Æ‡§ø‡§≤ ‡§ö‡•Å‡§ï‡•á ‡§π‡•à‡§Ç! ‡§¨‡•ã‡§ü ‡§Ö‡§¨ ‡§¨‡§æ‡§∞‡•Ä-‡§¨‡§æ‡§∞‡•Ä ‡§∏‡•á ‡§™‡•ç‡§≤‡•á‡§Ø‡§∞‡•ç‡§∏ ‡§ï‡•ã ‡§¨‡•Å‡§≤‡§æ‡§è‡§ó‡§æ‡•§`, threadID);

    let playerTurn = 0;
    
    // üéØ Function to ask players to explain their word
    const playTurn = () => {
        if (playerTurn >= players.length) {
            return startVoting();
        }
        let player = players[playerTurn];
        playerTurn++;

        api.sendMessage(`üì¢ *${mentions[player] || "Player"}*, ‡§Ö‡§™‡§®‡•á ‡§∂‡§¨‡•ç‡§¶ ‡§ï‡•ã **‡§è‡§ï ‡§µ‡§æ‡§ï‡•ç‡§Ø ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§ù‡§æ‡§ì!**`, threadID, (err, info) => {
            if (!err) {
                let messageID = info.messageID;
                // ‚è≥ 30 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§ï‡§æ ‡§ü‡§æ‡§á‡§Æ ‡§Æ‡§ø‡§≤‡•á‡§ó‡§æ ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
                setTimeout(() => {
                    api.getMessageInfo(messageID, (err, msgInfo) => {
                        if (err || !msgInfo.body) {
                            api.sendMessage(`‚ö† *${mentions[player] || "Player"}* ‡§®‡•á ‡§ï‡•ã‡§à ‡§ú‡§µ‡§æ‡§¨ ‡§®‡§π‡•Ä‡§Ç ‡§¶‡§ø‡§Ø‡§æ!`, threadID);
                        }
                        // üîÑ ‡§Ö‡§ó‡§≤‡•á ‡§™‡•ç‡§≤‡•á‡§Ø‡§∞ ‡§ï‡•ã ‡§¨‡•Å‡§≤‡§æ‡§ì
                        playTurn();
                    });
                }, 30000);
            }
        });
    };

    // üó≥ Voting Function
    const startVoting = () => {
        api.sendMessage(`üîç **‡§Ö‡§¨ ‡§µ‡•ã‡§ü‡§ø‡§Ç‡§ó ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã‡§ó‡•Ä!**\n\nüëâ ‡§ú‡§ø‡§∏ ‡§™‡•ç‡§≤‡•á‡§Ø‡§∞ ‡§ï‡•ã ‡§Ü‡§™ **Spy** ‡§∏‡§Æ‡§ù‡§§‡•á ‡§π‡•à‡§Ç, ‡§â‡§∏‡§ï‡•á ‡§Æ‡•à‡§∏‡•á‡§ú ‡§™‡§∞ ‚ùå ‡§∞‡§ø‡§è‡§ï‡•ç‡§∂‡§® ‡§¶‡•á‡§Ç‡•§\n\n‚è≥ ‡§µ‡•ã‡§ü‡§ø‡§Ç‡§ó 30 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§ñ‡§º‡§§‡•ç‡§Æ ‡§π‡•ã‡§ó‡•Ä‡•§`, threadID);
        
        setTimeout(() => {
            api.getThreadInfo(threadID, (err, info) => {
                if (err) return api.sendMessage("‚ö† ‡§µ‡•ã‡§ü‡§ø‡§Ç‡§ó ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ ‡§π‡•Å‡§à!", threadID);

                let maxVotes = 0;
                let accused = "";
                for (let reaction of info.message_reactions) {
                    if (reaction.reaction === "‚ùå" && reaction.count > maxVotes) {
                        maxVotes = reaction.count;
                        accused = reaction.userID;
                    }
                }

                if (accused === spy) {
                    api.sendMessage(`‚úÖ **‡§¨‡§ß‡§æ‡§à ‡§π‡•ã!** ‡§Ü‡§™ ‡§∏‡§π‡•Ä ‡§•‡•á! **${mentions[spy] || "Spy"}** ‡§Ö‡§∏‡§≤‡•Ä Spy ‡§®‡§ø‡§ï‡§≤‡§æ!`, threadID);
                } else {
                    api.sendMessage(`‚ùå ‡§ó‡§≤‡§§ ‡§µ‡•ã‡§ü‡§ø‡§Ç‡§ó! ‡§Ö‡§∏‡§≤‡•Ä Spy **${mentions[spy] || "Spy"}** ‡§•‡§æ!`, threadID);
                }
            });
        }, 30000);
    };

    setTimeout(playTurn, 5000);
};
